version: '3.8'
services:
  db:
    image: postgres:13.0-alpine
    container_name: db
    restart: always
    user: ${POSTGRES_USER}
    expose:
      - "5432"
    volumes:
      - data_volume:/var/lib/postgresql/data/
      - ../psql/movies_database.sql:/docker-entrypoint-initdb.d/movies_database.sql
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - vidim
    ports:
      - 5432:5432
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: postgres

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - vidim
    ports:
      - 6379:6379
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: redis

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    networks:
      - vidim
    ports:
    - "8081:8081"
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: redis-commander

  jaeger-service:
    container_name: 'jaeger'
    image: jaegertracing/all-in-one:latest
    networks:
      - vidim
    ports:
      - "16686:16686"
    depends_on:
      - auth_service
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: jaeger

  nginx:
    image: nginx:1.19.3
    container_name: 'nginx'
    restart: always
    networks:
      - vidim
    ports:
      - ${PUBLISHED_NGINX_PORT}:80
      - ${PUBLISHED_NGINX_PORT_SECURED}:443
    volumes:
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./etc/nginx/conf.d:/etc/nginx/conf.d:ro
#      - ../static:/usr/share/nginx/html/static/
      - ../data:/data/:ro
      - static_volume:/opt/app/static/
      - media_volume:/opt/app/media/
      - /tmp/logs/nginx/:/var/log/nginx/
    depends_on:
      - auth_service
      - jaeger-service
      - admin_service
      - film_service
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: nginx
    environment:
      NGINX_SET_REAL_IP_FROM: "192.168.1.0/24"

  auth_service:
    build: ../auth_service/
    command: "'gunicorn main:app --bind 0.0.0.0:8080 -w 4 -k uvicorn.workers.UvicornWorker'"
    container_name: 'auth_service'
    restart: always
    volumes:
      - ../static:/opt/src/static
      - ../templates/:/opt/src/templates
#    healthcheck:
#      test: curl -s ${DOCS_URL} >/dev/null || exit 1
#      interval: 30s
#      timeout: 10s
#      retries: 3
    depends_on:
      - db
      - redis
    networks:
      - vidim
    ports:
      - ${PUBLISHED_UNICORN_PORT}:${INNER_UVICORN_PORT}
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: auth_api

  auth_celery_worker:
    build: ../auth_service/
    command: "'celery -A celery_config:app worker --loglevel=info -Q profile_queue'"
    env_file:
      - .env
    networks:
      - vidim
    depends_on:
      - redis
    links:
      - redis

  admin_service:
    build: ../admin_service/
    container_name: admin_service
    volumes:
      - static_volume:/opt/app/static/
      - media_volume:/opt/app/media/
    env_file:
      - .env
    networks:
      - vidim
    expose:
      - "8000"
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: admin

  profiles_db:
    image: postgres:13.0-alpine
    container_name: profiles_db
    restart: always
    user: ${POSTGRES_USER}
    volumes:
      - profiles_volume:/var/lib/postgresql/data/
      - ../psql/movies_database.sql:/docker-entrypoint-initdb.d/movies_database.sql
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - vidim
    expose:
      - "5432"
    ports:
      - 5433:5432
    # env_file:
    #   - .env
    environment:
      POSTGRES_USER: ${PROFILE_PG_USER}
      POSTGRES_PASSWORD: ${PROFILE_PG_PASS}
      POSTGRES_DB: ${PROFILE_PG_DB}
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: profiles_postgres

  profiles-service:
    build: ../profiles_service/
    container_name: profiles-service
    env_file:
      - .env
    networks:
      - vidim
    expose:
      - "8000"
    ports:
      - 8002:8000
    depends_on:
      profiles_db:
        condition: service_healthy
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: profiles

  etl-service:
    build: ../psql_to_es/
    container_name: etl-service
    restart: always
    env_file:
      - .env
    networks:
      - vidim
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: etl_es

  film_service:
    build:
      context: ../film_service/
      target: production
    container_name: film_service
    restart: always
    env_file:
      - .env
    networks:
      - vidim
    expose:
      - "8888"
    ports:
      - 8888:8888
    depends_on:
      elasticsearch:
        condition: service_started
      redis:
        condition: service_started
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: film_api

  mongors1n1:
    container_name: mongors1n1
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27017:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data1:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo

  mongors1n2:
    container_name: mongors1n2
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27027:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data2:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo

  mongors1n3:
    container_name: mongors1n3
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors1 --dbpath /data/db --port 27017
    ports:
      - 27037:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data3:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo

  mongors2n1:
    container_name: mongors2n1
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    ports:
      - 27047:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data4:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo

  mongors2n2:
    container_name: mongors2n2
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    ports:
      - 27057:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data5:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo

  mongors2n3:
    container_name: mongors2n3
    image: mongo
    networks:
      - vidim
    command: mongod --shardsvr --replSet mongors2 --dbpath /data/db --port 27017
    ports:
      - 27067:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/data6:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo


  mongocfg1:
    container_name: mongocfg1
    image: mongo
    networks:
      - vidim
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config1:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo-config

  mongocfg2:
    container_name: mongocfg2
    image: mongo
    networks:
      - vidim
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config2:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo-config

  mongocfg3:
    container_name: mongocfg3
    image: mongo
    networks:
      - vidim
    command: mongod --configsvr --replSet mongors1conf --dbpath /data/db --port 27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /tmp/mongo_cluster/config3:/data/db
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo-config


  mongos1:
    image: mongo
    container_name: mongos1
    hostname: mongos1
    networks:
      - vidim
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    ports:
      - 27019:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo-router
  
  mongos2:
    image: mongo
    container_name: mongos2
    hostname: mongos2
    networks:
      - vidim
    depends_on:
      - mongocfg1
      - mongocfg2
      - mongocfg3
    command: mongos --configdb mongors1conf/mongocfg1:27017,mongocfg2:27017,mongocfg3:27017 --port 27017 --bind_ip_all
    ports:
      - 27020:27017
    expose:
      - "27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: mongo-router


  ugc_service:
    build:
      context: ../ugc_service/
      target: production
    container_name: ugc_service
    hostname: ugc_sevice
    env_file:
      - .env
    networks:
      - vidim
    expose:
      - "8889"
    ports:
      - 8889:8889
    depends_on:
      - mongos1
      - mongos2
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: ugc_api

##############################################################################
#                             ELK services
##############################################################################

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: elasticsearch
    volumes:
      - elasticsearch_data:/opt/elasticsearch/data
    expose:
      - "9200"
    ports:
      - 9200:9200
    env_file:
      - .env
    restart: always
    networks:
      - vidim
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: elk_elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=false

  kibana:
    image: kibana:8.6.2
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - vidim
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: elk_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

  logstash:
    image: logstash:8.6.2
    ports:
      - "5044:5044/udp"
    depends_on:
      - elasticsearch
    volumes:
      - ./etc/ELK_service/logstash.conf:/config/logstash.conf:ro
      - /tmp/logs/nginx/:/var/log/nginx/:ro
    command: logstash -f /config/logstash.conf
    restart: always
    networks:
      - vidim
    logging:
      driver: gelf
      options:
        gelf-address: udp://127.0.0.1:5044
        tag: elk_logstash
    environment:
      XPACK_MONITORING_ENABLED: "false"
      ES_HOST: "elasticsearch:9200"

  # no reason to use this layer here
  # filebeat:
  #   image: elastic/filebeat:8.6.2
  #   volumes:
  #     - /tmp/logs/nginx:/var/log/nginx:ro
  #     - ./etc/ELK_service/filebeat.yml:/usr/share/filebeat/filebeat.yml
  #   depends_on:
  #     - nginx
  #     - logstash
  #     - elasticsearch
  #     - kibana
  #   links:
  #     - logstash
  #   networks:
  #     - vidim
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: udp://127.0.0.1:5044
  #       tag: filebeat

##############################################################################
#                         NOTIFICACTION services
##############################################################################

  # rabbitmq:
  #   container_name: yp_rabbitmq
  #   image: "rabbitmq:3-management"
  #   ports:
  #     - "15672:15672"
  #     - "5672:5672"
  #   networks:
  #     - vidim
  #
  # celery:
  #   container_name: yp_celery
  #   build:
  #     context: ../notification_service
  #     dockerfile: celery.dockerfile
  #   depends_on:
  #     - notification_service
  #     - rabbitmq
  #   volumes:
  #     - ../notification_service:/opt/app
  #   env_file:
  #     - .env
  #   networks:
  #     - vidim
  #
  # notification_service:
  #   container_name: yp_notification_service
  #   build:
  #     context: ../notification_service
  #     dockerfile: web.dockerfile
  #   ports:
  #     - "8001:8000"
  #   volumes:
  #     - ../notification_service:/opt/app
  #     - static_dir:/opt/app/static/
  #     - media_dir:/opt/app/media/
  #   environment:
  #     - DB_HOST=db
  #     - RABBITMQ_URL=${RABBITMQ_URL}
  #   depends_on:
  #     - rabbitmq
  #     - db
  #   env_file:
  #     - .env
  #   networks:
  #     - vidim

volumes:
  data_volume:
  profiles_volume:
  redis_data:
  static:
  static_volume:
  media_volume:
  elasticsearch_data:
  media_dir:
  static_dir:

networks:
  vidim:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
